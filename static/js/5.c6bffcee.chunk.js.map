{"version":3,"sources":["Invoice/data/initialData.ts","Invoice/styles/styles.ts","Invoice/styles/compose.ts","Invoice/EditableInput.tsx","Invoice/EditableSelect.tsx","Invoice/EditableTextarea.tsx","Invoice/EditableCalendarInput.tsx","Invoice/data/paymentList.ts","Invoice/Document.tsx","Invoice/Page.tsx","Invoice/View.tsx","Invoice/Text.tsx","Invoice/DownloadPDF.tsx","Invoice/InvoicePage.tsx"],"names":["initialProductLine","desc","qty","price","initialInvoice","clientId","companyId","companyName","companyAddr","email","clientName","clientAddr","clientEmail","invoiceId","invoiceDate","dueDate","productLines","advancePercent","note","totalAmount","dueAmount","discount","tax","method","network","workCompleted","isSettled","uploadDocURI","styles","dark","color","white","backgroundColor","flex","display","flexDirection","flexWrap","paddingRight","width","row","borderBottom","marginTop","marginBottom","padding","paddingBottom","right","textAlign","bold","fontWeight","fontSize","page","fontFamily","span","logo","compose","classes","css","replace","split","forEach","className","undefined","Object","assign","EditableInput","placeholder","value","onChange","pdfMode","style","type","e","target","EditableSelect","options","useState","isEditing","setIsEditing","onBlur","autoFocus","map","option","key","text","readOnly","onFocus","EditableTextarea","rows","minRows","EditableCalendarInput","selected","date","dateFormat","networkList","methodList","Document","children","Page","size","View","Text","Download","data","show","setShow","useEffect","timeout","setTimeout","clearTimeout","title","document","fileName","toLowerCase","aria-label","Font","register","family","fonts","src","InvoicePage","invoice","setInvoice","subTotal","setSubTotal","saleTax","setSaleTax","setDiscount","myClients","setMyClients","Date","invoiceDueDate","valueOf","setDate","getDate","allClients","myAsyncFunction","a","getAllClients","clients","getCompanyId","getCompanyById","company","loadAccount","account","console","log","element","push","id","newInvoice","name","getClientCompany","clientComany","handleChange","clientCompanyId","clientCompany","handleProductLineChange","index","productLine","i","newProductLine","length","includes","n","parseFloat","toString","quantityNumber","rateNumber","match","discountRate","total","sendInvoice","finalItems","item","itemData","web3","utils","toWei","values","paymentDetails","paymentArray","invoiceData","invoiceArray","createInvoice","window","alert","location","href","textOverflow","format","Array","isArray","slice","toFixed","quantity","rate","calculateAmount","onClick","filter","handleRemove","event"],"mappings":"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","file":"static/js/5.c6bffcee.chunk.js","sourcesContent":["import { ProductLine, Invoice } from './types'\n\nexport const initialProductLine: ProductLine = {\n  desc: '',\n  qty: '1',\n  price: '0.00',\n}\n\nexport const initialInvoice: Invoice = {\n  clientId:'1',\n  companyId:'1',\n  companyName: '',\n  companyAddr: '',\n  email: '',\n  clientName: '',\n  clientAddr: '',\n  clientEmail: '',\n  invoiceId: '1',\n  invoiceDate: 'Jan 15, 2022',\n  dueDate: 'Feb 24, 2022',\n  productLines: [\n    {\n      desc: 'Item 1',\n      qty: '2',\n      price: '10.00',\n    }\n  ],\n  advancePercent: '50',\n  note: 'It was great doing business with you.',\n  totalAmount: '18.00',\n  dueAmount: '18.00',\n  discount: '20',\n  tax: '10',\n  method: \"ETH\",\n  network: \"Ethereum\",\n\n  workCompleted:\"false\",\n  isSettled: \"false\",\n  uploadDocURI: \"www.google.com\"\n}\n","import { CSSClasses } from '../data/types'\n\nconst colorDark = '#222'\nconst colorDark2 = '#666'\nconst colorGray = '#e3e3e3'\nconst colorWhite = '#fff'\n\nconst styles: CSSClasses = {\n  dark: {\n    color: colorDark,\n  },\n\n  white: {\n    color: colorWhite,\n  },\n\n  'bg-dark': {\n    backgroundColor: colorDark2,\n  },\n\n  'bg-gray': {\n    backgroundColor: colorGray,\n  },\n\n  flex: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n\n  'w-auto': {\n    flex: 1,\n    paddingRight: '8px',\n  },\n\n  'ml-30': {\n    flex: 1,\n  },\n\n  'w-100': {\n    width: '100%',\n  },\n\n  'w-50': {\n    width: '50%',\n  },\n\n  'w-55': {\n    width: '55%',\n  },\n\n  'w-45': {\n    width: '45%',\n  },\n\n  'w-60': {\n    width: '60%',\n  },\n\n  'w-40': {\n    width: '40%',\n  },\n\n  'w-48': {\n    width: '48%',\n  },\n\n  'w-17': {\n    width: '17%',\n  },\n\n  'w-18': {\n    width: '18%',\n  },\n\n  row: {\n    borderBottom: `1px solid ${colorGray}`,\n  },\n\n  'mt-40': {\n    marginTop: '40px',\n  },\n\n  'mt-30': {\n    marginTop: '30px',\n  },\n\n  'mt-20': {\n    marginTop: '20px',\n  },\n\n  'mt-10': {\n    marginTop: '10px',\n  },\n\n  'mb-5': {\n    marginBottom: '5px',\n  },\n\n  'p-4-8': {\n    padding: '4px 8px',\n  },\n\n  'p-5': {\n    padding: '5px',\n  },\n\n  'pb-10': {\n    paddingBottom: '10px',\n  },\n\n  right: {\n    textAlign: 'right',\n  },\n\n  bold: {\n    fontWeight: 'bold',\n  },\n\n  'fs-20': {\n    fontSize: '20px',\n  },\n\n  'fs-45': {\n    fontSize: '45px',\n  },\n\n  page: {\n    fontFamily: 'Nunito',\n    fontSize: '13px',\n    color: '#555',\n    padding: '40px 35px',\n  },\n\n  span: {\n    padding: '4px 12px 4px 0',\n  },\n\n  logo: {\n    display: 'block',\n  }\n}\n\nexport default styles\n","import ReactPDF from '@react-pdf/renderer'\nimport styles from './styles'\n\nconst compose = (classes: string): ReactPDF.Styles => {\n  const css: ReactPDF.Styles = {}\n\n  const classesArray: string[] = classes.replace(/\\s+/g, ' ').split(' ')\n\n  classesArray.forEach((className) => {\n    if (typeof styles[className] !== undefined) {\n      Object.assign(css, styles[className])\n    }\n  })\n\n  return css\n}\n\nexport default compose\n","import React, { FC } from 'react'\nimport { Text } from '@react-pdf/renderer'\nimport compose from './styles/compose'\n\ninterface Props {\n  className?: string\n  placeholder?: string\n  value?: string\n  onChange?: (value: string) => void\n  pdfMode?: boolean\n}\n\nconst EditableInput: FC<Props> = ({ className, placeholder, value, onChange, pdfMode }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <Text style={compose('span ' + (className ? className : ''))}>{value}</Text>\n      ) : (\n        <input\n          type=\"text\"\n          className={'input ' + (className ? className : '')}\n          placeholder={placeholder || ''}\n          value={value || ''}\n          onChange={onChange ? (e) => onChange(e.target.value) : undefined}\n        />\n      )}\n    </>\n  )\n}\n\nexport default EditableInput\n","import React, { FC, useState } from 'react'\nimport { Text } from '@react-pdf/renderer'\nimport compose from './styles/compose'\n\nexport interface SelectOption {\n  value: string\n  text: string\n}\n\ninterface Props {\n  className?: string\n  options?: SelectOption[]\n  placeholder?: string\n  value?: string\n  onChange?: (value: string) => void\n  pdfMode?: boolean\n}\n\nconst EditableSelect: FC<Props> = ({\n  className,\n  options,\n  placeholder,\n  value,\n  onChange,\n  pdfMode,\n}) => {\n  const [isEditing, setIsEditing] = useState<boolean>(false)\n\n  return (\n    <>\n      {pdfMode ? (\n        <Text style={compose('span ' + (className ? className : ''))}>{value}</Text>\n      ) : (\n        <>\n          {isEditing ? (\n            <select\n              className={'select ' + (className ? className : '')}\n              value={value}\n              onChange={onChange ? (e) => onChange(e.target.value) : undefined}\n              onBlur={() => setIsEditing(false)}\n              autoFocus={true}\n            >\n              {options?.map((option) => (\n                <option key={option.text} value={option.value}>\n                  {option.text}\n                </option>\n              ))}\n            </select>\n          ) : (\n            <input\n              readOnly={true}\n              type=\"text\"\n              className={'input ' + (className ? className : '')}\n              value={value || ''}\n              placeholder={placeholder || ''}\n              onFocus={() => setIsEditing(true)}\n            />\n          )}\n        </>\n      )}\n    </>\n  )\n}\n\nexport default EditableSelect\n","import React, { FC } from 'react'\nimport TextareaAutosize from 'react-textarea-autosize'\nimport { Text } from '@react-pdf/renderer'\nimport compose from './styles/compose'\n\ninterface Props {\n  className?: string\n  placeholder?: string\n  value?: string\n  onChange?: (value: string) => void\n  pdfMode?: boolean\n  rows?: number\n}\n\nconst EditableTextarea: FC<Props> = ({\n  className,\n  placeholder,\n  value,\n  onChange,\n  pdfMode,\n  rows,\n}) => {\n  return (\n    <>\n      {pdfMode ? (\n        <Text style={compose('span ' + (className ? className : ''))}>{value}</Text>\n      ) : (\n        <TextareaAutosize\n          minRows={rows || 1}\n          className={'input ' + (className ? className : '')}\n          placeholder={placeholder || ''}\n          value={value || ''}\n          onChange={onChange ? (e) => onChange(e.target.value) : undefined}\n        />\n      )}\n    </>\n  )\n}\n\nexport default EditableTextarea\n","import React, { FC } from 'react'\nimport { Text } from '@react-pdf/renderer'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport compose from './styles/compose'\n\ninterface Props {\n  className?: string\n  value?: string\n  selected?: Date\n  onChange?: (date: Date | [Date, Date] | null) => void\n  pdfMode?: boolean\n}\n\nconst EditableCalendarInput: FC<Props> = ({ className, value, selected, onChange, pdfMode }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <Text style={compose('span ' + (className ? className : ''))}>{value}</Text>\n      ) : (\n        <DatePicker\n          className={'input ' + (className ? className : '')}\n          selected={selected}\n          onChange={onChange ? (date) => onChange(date) : (date) => null}\n          dateFormat=\"MMM dd, yyyy\"\n        />\n      )}\n    </>\n  )\n}\n\nexport default EditableCalendarInput\n","export const networkList = [\n    { value: 'Ethereum', text: 'Ethereum' },\n    { value: 'Polygon', text: 'Polygon'},\n]\nexport const methodList = [\n    { value: 'ETH', text: 'ETH'},\n    { value: 'MATIC', text: 'MATIC'},\n]\n","import React, { FC } from 'react'\nimport { Document as PdfDocument } from '@react-pdf/renderer'\n\ninterface Props {\n  pdfMode?: boolean\n}\n\nconst Document: FC<Props> = ({ pdfMode, children }) => {\n  return <>{pdfMode ? <PdfDocument>{children}</PdfDocument> : <>{children}</>}</>\n}\n\nexport default Document\n","import React, { FC } from 'react'\nimport { Page as PdfPage } from '@react-pdf/renderer'\nimport compose from './styles/compose'\n\ninterface Props {\n  className?: string\n  pdfMode?: boolean\n}\n\nconst Page: FC<Props> = ({ className, pdfMode, children }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <PdfPage size=\"A4\" style={compose('page ' + (className ? className : ''))}>\n          {children}\n        </PdfPage>\n      ) : (\n        <div className={'page ' + (className ? className : '')}>{children}</div>\n      )}\n    </>\n  )\n}\n\nexport default Page\n","import React, { FC } from 'react'\nimport { View as PdfView } from '@react-pdf/renderer'\nimport compose from './styles/compose'\n\ninterface Props {\n  className?: string\n  pdfMode?: boolean\n}\n\nconst View: FC<Props> = ({ className, pdfMode, children }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <PdfView style={compose('view ' + (className ? className : ''))}>{children}</PdfView>\n      ) : (\n        <div className={'view ' + (className ? className : '')}>{children}</div>\n      )}\n    </>\n  )\n}\n\nexport default View\n","import React, { FC } from 'react'\nimport { Text as PdfText } from '@react-pdf/renderer'\nimport compose from './styles/compose'\n\ninterface Props {\n  className?: string\n  pdfMode?: boolean\n  children?: string\n}\n\nconst Text: FC<Props> = ({ className, pdfMode, children }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <PdfText style={compose('span ' + (className ? className : ''))}>{children}</PdfText>\n      ) : (\n        <span className={'span ' + (className ? className : '')}>{children}</span>\n      )}\n    </>\n  )\n}\n\nexport default Text\n","import React, { FC, useEffect, useState } from 'react'\nimport { PDFDownloadLink } from '@react-pdf/renderer'\nimport { Invoice } from './data/types'\nimport InvoicePage from './InvoicePage'\n\ninterface Props {\n  data: Invoice\n}\n\nconst Download: FC<Props> = ({ data }) => {\n  const [show, setShow] = useState<boolean>(false)\n\n  useEffect(() => {\n    setShow(false)\n\n    const timeout = setTimeout(() => {\n      setShow(true)\n    }, 500)\n\n    return () => clearTimeout(timeout)\n  }, [data])\n\n  return (\n    <div className={'download-pdf ' + (!show ? 'loading' : '')} title=\"Save PDF\">\n      {show && (\n        <PDFDownloadLink\n          document={<InvoicePage pdfMode={true} data={data} />}\n          fileName={`INV_0${data.invoiceId ? data.invoiceId.toLowerCase() : 'invoice'}.pdf`}\n          aria-label=\"Save PDF\"\n        ></PDFDownloadLink>\n      )}\n    </div>\n  )\n}\n\nexport default Download\n","import React, { FC, useState, useEffect } from 'react'\nimport { Invoice, ProductLine } from './data/types'\nimport { initialInvoice, initialProductLine } from './data/initialData'\nimport EditableInput from './EditableInput'\nimport EditableSelect from './EditableSelect'\nimport EditableTextarea from './EditableTextarea'\nimport EditableCalendarInput from './EditableCalendarInput'\nimport { networkList, methodList } from './data/paymentList'\nimport Document from './Document'\nimport Page from './Page'\nimport View from './View'\nimport Text from './Text'\nimport { Font } from '@react-pdf/renderer'\nimport Download from './DownloadPDF'\nimport format from 'date-fns/format'\nimport { Text as PdfText } from '@react-pdf/renderer'\nimport {loadAccount, getCompanyId, getAllClients, getCompanyById, getClientCompany,createInvoice, web3} from \"../services/web3\";\nimport '../assets/invoice-scss/main.scss'\n\nFont.register({\n  family: 'Nunito',\n  fonts: [\n    { src: 'https://fonts.gstatic.com/s/nunito/v12/XRXV3I6Li01BKofINeaE.ttf' },\n    { src: 'https://fonts.gstatic.com/s/nunito/v12/XRXW3I6Li01BKofA6sKUYevN.ttf', fontWeight: 600 },\n  ],\n})\n\ninterface Props {\n  data?: Invoice\n  pdfMode?: boolean\n}\n\nconst InvoicePage: FC<Props> = ({ data, pdfMode }) => {\n  const [invoice, setInvoice] = useState<Invoice>(data ? { ...data } : { ...initialInvoice })\n  const [subTotal, setSubTotal] = useState<number>()\n  const [saleTax, setSaleTax] = useState<number>()\n  const [discount, setDiscount] = useState<number>()\n  \n  const [myClients, setMyClients] = useState<any[]>();\n  const dateFormat = 'MMM dd, yyyy'\n  const invoiceDate = invoice.invoiceDate !== '' ? new Date(invoice.invoiceDate) : new Date()\n  const invoiceDueDate =\n    invoice.dueDate !== ''\n      ? new Date(invoice.dueDate)\n      : new Date(invoiceDate.valueOf())\n\n  if (invoice.dueDate === '') {\n    invoiceDueDate.setDate(invoiceDueDate.getDate() + 30)\n  }\n\n  let allClients: any[] = [];\n\n  const myAsyncFunction = async (): Promise<any> => {\n    const clients = await getAllClients();\n    const companyId = await getCompanyId();\n    const company = await getCompanyById(companyId);\n    const account = await loadAccount();\n    console.log(clients);\n    clients.forEach((element: any[]) => {\n      allClients.push({value:element[1], text:element[1], id:element[0]});\n    });\n\n    const newInvoice = { ...invoice }\n    newInvoice.companyName = company.name;\n    newInvoice.email = company.email;\n    newInvoice.companyId = companyId;\n    try {\n      newInvoice.clientAddr = allClients[0].value;\n      newInvoice.clientId = allClients[0].id;\n      const clientComany = await getClientCompany(companyId, newInvoice.clientId)\n      newInvoice.clientName = clientComany.name;\n      newInvoice.clientEmail = clientComany.email;\n    }\n    catch(e) {\n      console.log(e);\n      newInvoice.clientAddr = account;\n      newInvoice.clientId = \"0\";\n    }\n    newInvoice.companyAddr = account;\n\n    console.log(newInvoice)\n    setMyClients(allClients)\n    setInvoice(newInvoice)\n  }\n\n  const handleChange = async (name: keyof Invoice, value: string | number) => {\n    if (name !== 'productLines') {\n\n      const newInvoice = { ...invoice }\n\n      if (typeof value === 'string') {\n        if(name === \"clientAddr\") {\n          newInvoice[name] = value;\n          const clientCompanyId = await getCompanyId(value);\n          const clientCompany = await getCompanyById(clientCompanyId)\n          newInvoice[\"clientName\"] = clientCompany.name;\n          newInvoice[\"clientEmail\"] = clientCompany.email;\n        }\n        if(name === \"totalAmount\"){\n          newInvoice[name] = value;\n          newInvoice[\"dueAmount\"] = value;\n        }\n        else{\n          newInvoice[name] = value\n        }\n      }\n\n\n      setInvoice(newInvoice)\n  }\n}\n\n  const handleProductLineChange = (index: number, name: keyof ProductLine, value: string) => {\n    const productLines = invoice.productLines.map((productLine, i) => {\n      if (i === index) {\n        const newProductLine = { ...productLine }\n\n        if (name === 'desc') {\n          newProductLine[name] = value\n        } else {\n          if (\n            value[value.length - 1] === '.' ||\n            (value[value.length - 1] === '0' && value.includes('.'))\n          ) {\n            newProductLine[name] = value\n          } else {\n            const n = parseFloat(value)\n\n            newProductLine[name] = (n ? n : 0).toString()\n          }\n        }\n\n        return newProductLine\n      }\n\n      return { ...productLine }\n    })\n\n    setInvoice({ ...invoice, productLines })\n  }\n\n  const handleRemove = (i: number) => {\n    const productLines = invoice.productLines.filter((productLine, index) => index !== i)\n\n    setInvoice({ ...invoice, productLines })\n  }\n\n  const handleAdd = () => {\n    const productLines = [...invoice.productLines, { ...initialProductLine }]\n\n    setInvoice({ ...invoice, productLines })\n  }\n\n  const calculateAmount = (quantity: string, rate: string) => {\n    const quantityNumber = parseFloat(quantity)\n    const rateNumber = parseFloat(rate)\n    const amount = quantityNumber && rateNumber ? quantityNumber * rateNumber : 0\n\n    return amount.toFixed(2)\n  }\n  useEffect (() => {\n    myAsyncFunction()\n  },[])\n  useEffect(() => {\n    let subTotal = 0\n\n    invoice.productLines.forEach((productLine) => {\n      const quantityNumber = parseFloat(productLine.qty)\n      const rateNumber = parseFloat(productLine.price)\n      const amount = quantityNumber && rateNumber ? quantityNumber * rateNumber : 0\n\n      subTotal += amount\n    })\n\n    setSubTotal(subTotal)\n  }, [invoice.productLines])\n\n  useEffect(() => {\n    const match = parseFloat(invoice.tax)\n    const taxRate = match ? match : 0\n    const saleTax = subTotal ? (subTotal * taxRate / 100) : 0\n    const discountRate = parseFloat(invoice.discount) ? parseFloat(invoice.discount) : 0\n    const discount = subTotal ? ((subTotal * discountRate) / 100): 0\n    const total = subTotal? subTotal + saleTax - discount : 0\n    setSaleTax(saleTax)\n    setDiscount(discount)\n    handleChange('totalAmount',total.toString())\n  }, [subTotal, invoice.tax,invoice.discount])\n\n\n\n   const sendInvoice = async (): Promise<any> =>  {\n    let data = {...invoice}\n\n    let finalItems : any[] = []\n    data.productLines.forEach((item:any) => {\n        let itemData = {...item}\n        itemData['price'] = web3.utils.toWei(item.price)\n        itemData['discount'] = data.discount\n        itemData['tax'] = data.tax\n        finalItems.push(Object.values(itemData));\n    })\n\n    let paymentDetails = {    \n      \"method\": data.method, \n      \"network\": data.network,\n      \"totalAmount\":web3.utils.toWei(data.totalAmount),\n      \"dueAmount\":web3.utils.toWei(data.dueAmount),\n      \"advancePercent\":data.advancePercent\n  }\n  let paymentArray =  Object.values(paymentDetails)\n  let invoiceData =  {\n    \"companyId\": data.companyId,\n    \"clientId\": data.clientId,\n    \"items\" :finalItems,\n    \"payment\": paymentArray,\n    \"workCompleted\": false,\n    \"invoiceDate\":data.invoiceDate,\n    \"dueDate\": data.dueDate,\n    \"uploadDocURI\": data.uploadDocURI,\n    \"note\": data.note,\n  }\n\n    let invoiceArray = Object.values(invoiceData)\n\n    let result = await createInvoice(invoiceArray)\n    window.alert('Invoice Created')\n    window.location.href = '/dashboard'\n  }\n\n  return (\n    <Document pdfMode={pdfMode}>\n      <Page className=\"invoice-wrapper\" pdfMode={pdfMode}>\n        {!pdfMode && <Download data={invoice} />}\n\n        <View className=\"flex\" pdfMode={pdfMode}>\n          <View className=\"w-50\" pdfMode={pdfMode}>\n\n            <EditableInput\n              className=\"fs-20 bold\"\n              placeholder=\"Your Company\"\n              value={invoice.companyName}\n              pdfMode={pdfMode}\n            />\n\n            {pdfMode ? (\n              <PdfText style={{fontSize:'10px'}}>{invoice.companyAddr}</PdfText>\n            ) : (\n              <input\n              type=\"text\"\n              className={'input'}\n              value={invoice.companyAddr}\n              readOnly\n              style={{textOverflow:'ellipsis',width:'110%'}}\n            />\n            )}    \n\n            <EditableInput\n              placeholder=\"Email Address\"\n              value={invoice.email}\n              \n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-50\" pdfMode={pdfMode}>        \n            <EditableInput\n              className=\"fs-45 right bold\"\n              placeholder=\"Invoice\"\n              value={\"INVOICE\"}\n              pdfMode={pdfMode}\n            />\n          </View>\n        </View>\n\n\n\n\n        <View className=\"flex mt-40\" pdfMode={pdfMode}>\n          \n          <View className=\"w-55\" pdfMode={pdfMode}>\n            \n              {pdfMode ? (\n              <PdfText style={{fontSize:'16px',fontWeight:'bold' }}>Bill To:</PdfText>\n            ) : (\n              <PdfText style={{fontSize:'16px',fontWeight:'bold'}}>Bill To:</PdfText>\n            )}    \n            <EditableInput\n              placeholder=\"Your Client's Name\"\n              value={invoice.clientName}\n              pdfMode={pdfMode}\n            />\n            {pdfMode ? (\n              <PdfText style={{fontSize:'10px'}}>{invoice.clientAddr}</PdfText>\n            ) : (\n                  <EditableSelect\n                    options={myClients}\n                    value={invoice.clientAddr}\n                    onChange={(value) => handleChange('clientAddr', value)}\n                    pdfMode={pdfMode}\n                    />            \n            )}\n\n\n            <EditableInput\n              placeholder=\"Email Address\"\n              value={invoice.clientEmail}\n              pdfMode={pdfMode}\n            />\n            {pdfMode ? (\n              <PdfText style={{fontSize:'14px'}}>{invoice.network}</PdfText>\n            ) : (\n                  <EditableSelect\n                    options={networkList}\n                    value={invoice.network}\n                    onChange={(value) => handleChange('network', value)}\n                    pdfMode={pdfMode}\n                    />            \n            )}\n            {pdfMode ? (\n              <PdfText style={{fontSize:'14px'}}>{invoice.method}</PdfText>\n            ) : (\n                  <EditableSelect\n                    options={methodList}\n                    value={invoice.method}\n                    onChange={(value) => handleChange('method', value)}\n                    pdfMode={pdfMode}\n                    />            \n            )}\n          </View>\n          \n          <View className=\"w-45\" pdfMode={pdfMode}>\n            \n            <View className=\"flex mb-1\" pdfMode={pdfMode}>\n            <View className=\"w-40\" pdfMode={pdfMode}>\n              {pdfMode ? (\n              <PdfText style={{fontSize:'14px',fontWeight:'bold' }}>Invoice#</PdfText>\n            ) : (\n              <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Invoice#</PdfText>\n            )}    \n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableInput\n                  placeholder=\"01\"\n                  value={invoice.invoiceId}\n                  onChange={(value) => handleChange('invoiceId', value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n            \n            <View className=\"flex mb-1\" pdfMode={pdfMode}>\n            <View className=\"w-40\" pdfMode={pdfMode}>\n              {pdfMode ? (\n              <PdfText style={{fontSize:'14px',fontWeight:'bold' }}>Invoice Date</PdfText>\n            ) : (\n              <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Invoice Date</PdfText>\n            )}    \n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableCalendarInput\n                  value={format(invoiceDate, dateFormat)}\n                  selected={invoiceDate}\n                  onChange={(date) =>\n                    handleChange(\n                      'invoiceDate',\n                      date && !Array.isArray(date) ? format(date, dateFormat) : ''\n                    )\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n            \n            <View className=\"flex mb-1\" pdfMode={pdfMode}>\n            <View className=\"w-40\" pdfMode={pdfMode}>\n              {pdfMode ? (\n              <PdfText style={{fontSize:'14px',fontWeight:'bold' }}>Due Date</PdfText>\n            ) : (\n              <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Due Date</PdfText>\n            )}    \n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableCalendarInput\n                  value={format(invoiceDueDate, dateFormat)}\n                  selected={invoiceDueDate}\n                  onChange={(date) =>\n                    handleChange(\n                      'dueDate',\n                      date && !Array.isArray(date) ? format(date, dateFormat) : ''\n                    )\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n            \n\n            <View className=\"flex mb-1\" pdfMode={pdfMode}>\n              <View className=\"w-40\" pdfMode={pdfMode}>\n              {pdfMode ? (\n              <PdfText style={{fontSize:'14px',fontWeight:'bold' }}>Advance Payment</PdfText>\n            ) : (\n              <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Advance Payment</PdfText>\n            )}    \n              </View>\n              <View className=\"w-17\" pdfMode={pdfMode}>\n                <EditableInput\n                  value={invoice.advancePercent + '%'}\n                  onChange={(value) => handleChange('advancePercent', value.slice(0,-1))}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n              <Text className=\"dark w-auto\" pdfMode={pdfMode}>\n              {'ETH ' + (typeof subTotal !== 'undefined' && typeof saleTax !== 'undefined'\n                ? (parseFloat(invoice.totalAmount) * (parseFloat(invoice.advancePercent)/100))\n                : 0\n              ).toFixed(2)}\n            </Text>\n              </View>\n            </View>\n            \n          </View>\n        </View>\n\n\n\n        <View className=\"mt-30 bg-dark flex\" pdfMode={pdfMode}>\n          <View className=\"w-48 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold\"\n              value={\"Item Description\"}\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-17 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold right\"\n              value={\"Qty\"}\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-17 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold right\"\n              value={\"Rate\"}\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-18 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold right\"\n              value={\"Amount\"}\n              pdfMode={pdfMode}\n            />\n          </View>\n        </View>\n\n\n\n        {invoice.productLines.map((productLine, i) => {\n          return pdfMode && productLine.desc === '' ? (\n            <Text key={i}></Text>\n          ) : (\n            <View key={i} className=\"row flex ml-0 mr-0\" pdfMode={pdfMode}>\n              <View className=\"w-48 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <EditableTextarea\n                  className=\"dark\"\n                  rows={2}\n                  placeholder=\"Enter item name/description\"\n                  value={productLine.desc}\n                  onChange={(value) => handleProductLineChange(i, 'desc', value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-17 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"dark right\"\n                  value={productLine.qty}\n                  onChange={(value) => handleProductLineChange(i, 'qty', value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-17 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"dark right\"\n                  value={productLine.price}\n                  onChange={(value) => handleProductLineChange(i, 'price', value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-18 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <Text className=\"dark right\" pdfMode={pdfMode}>\n                  {calculateAmount(productLine.qty, productLine.price)}\n                </Text>\n              </View>\n              {!pdfMode && (\n                <button\n                  className=\"link row__remove\"\n                  aria-label=\"Remove Row\"\n                  title=\"Remove Row\"\n                  onClick={() => handleRemove(i)}\n                >\n                  <span className=\"icon icon-remove bg-red\"></span>\n                </button>\n              )}\n            </View>\n          )\n        })}\n\n<View className=\"flex\" pdfMode={pdfMode}>\n          <View className=\"w-50 mt-10\" pdfMode={pdfMode}>\n            {!pdfMode && (\n              <button className=\"link\" onClick={handleAdd}>\n                <span className=\"icon icon-add bg-green mr-10\"></span>\n                Add Line Item\n              </button>\n            )}\n          </View>\n          <View className=\"w-50 mt-20\" pdfMode={pdfMode}>\n            <View className=\"flex\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-1 \" pdfMode={pdfMode}>\n                  {pdfMode ? (\n                  <PdfText style={{fontSize:'12px',fontWeight:'bold'}}>Sub Total</PdfText>\n                ) : (\n                  <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Sub Total</PdfText>\n                )}    \n              </View>\n              <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {'ETH '+subTotal?.toFixed(2)}\n                </Text>\n              </View>\n            </View>\n            <View className=\"flex\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                {pdfMode ? (\n                <PdfText style={{fontSize:'12px',fontWeight:'bold' }}>Sale Tax</PdfText>\n              ) : (\n                <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Sale Tax</PdfText>\n              )}    \n                </View>\n              <View className=\"w-25 p-1\" pdfMode={pdfMode}>\n                <EditableInput\n                  value={invoice.tax + '%'}\n                  onChange={(value) => handleChange('tax', value.slice(0,-1))}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {'ETH '+ saleTax?.toFixed(2)}\n                </Text>\n              </View>\n            </View>\n            <View className=\"flex\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                {pdfMode ? (\n                <PdfText style={{fontSize:'12px',fontWeight:'bold' }}>Discount</PdfText>\n              ) : (\n                <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Discount</PdfText>\n              )}    \n                </View>\n              <View className=\"w-25 p-1\" pdfMode={pdfMode}>\n                <EditableInput\n                  value={invoice.discount +'%'}\n                  onChange={(value) => handleChange('discount', value.slice(0,-1))}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {'ETH '+discount?.toFixed(2)}\n                </Text>\n              </View>\n            </View>\n            <View className=\"flex bg-gray\" pdfMode={pdfMode}>\n            <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                {pdfMode ? (\n                <PdfText style={{fontSize:'12px',fontWeight:'bold' }}>Total</PdfText>\n              ) : (\n                <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Total</PdfText>\n              )}    \n                </View>\n              <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {'ETH '+(typeof subTotal !== 'undefined' && typeof saleTax !== 'undefined' && typeof discount !== 'undefined'\n                    ? subTotal + saleTax - discount\n                    : 0\n                  ).toFixed(2)}\n                </Text>\n              </View>\n            </View>\n            \n            {\n              pdfMode && \n              <View className=\"flex bg-gray\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                  {pdfMode ? (\n                  <PdfText style={{fontSize:'12px',fontWeight:'bold' }}>Total Due</PdfText>\n                ) : (\n                  <PdfText style={{fontSize:'14px',fontWeight:'bold'}}>Total Due</PdfText>\n                )}    \n                  </View>\n              <View className=\"w-50 p-1\" pdfMode={pdfMode}>\n                <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {'ETH '+ parseFloat(invoice.dueAmount).toFixed(2)}\n                </Text>\n              </View>\n          </View>\n            }\n          </View>\n          \n</View>\n\n        <View className=\"mt-20\" pdfMode={pdfMode}>\n          <EditableInput\n            className=\"bold w-100\"\n            value={\"Notes\"}\n            pdfMode={pdfMode}\n          />\n          <EditableTextarea\n            className=\"w-100\"\n            rows={2}\n            value={invoice.note}\n            onChange={(value) => handleChange('note', value)}\n            pdfMode={pdfMode}\n          />\n        </View>\n        <View className=\"mt-20\" pdfMode={pdfMode}>\n          <EditableInput\n            className=\"bold w-100\"\n            value={\"Terms & Conditions\"}\n            pdfMode={pdfMode}\n          />\n          <EditableTextarea\n            className=\"w-100\"\n            rows={2}\n            value={\"Please make the payment by the due date.\"}\n            pdfMode={pdfMode}\n          />\n        </View>\n        {!pdfMode && <button className='btn btn-primary'  onClick={(event:any) => {sendInvoice()}}>Send</button>}\n        \n      </Page>\n    </Document>\n  )\n}\n\nexport default InvoicePage\n"],"sourceRoot":""}